// RUN: %target-sil-opt -module-name moveonly_addresschecker -sil-move-only-address-checker -enable-experimental-feature MoveOnlyClasses -enable-sil-verify-all %s -move-only-address-checker-disable-lifetime-extension=true | %FileCheck %s

@_moveOnly
struct M {
  deinit {}
}

@_moveOnly
struct M4 {
  let s1: M
  let s2: M
  let s3: M
  let s4: M
}

sil @get_M4 : $@convention(thin) () -> @owned M4
sil @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
sil @see_addr_2 : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()


/// Two non-contiguous fields (#M4.s2, #M4.s4) are borrowed by @see_addr_2.
/// Two non-contiguous fields (#M4.s1, #M$.s3) are consumed by @end_2.
///
/// Verify that #M4.s2 and #M4.s4 both survive past the apply of @see_addr_2.
// CHECK-LABEL:  sil [ossa] @rdar110676577 : {{.*}} {
// CHECK:          [[STACK:%[^,]+]] = alloc_stack $M4
// CHECK:          [[GET_M4:%[^,]+]] = function_ref @get_M4
// CHECK:          [[M4:%[^,]+]] = apply [[GET_M4]]() : $@convention(thin) () -> @owned M4
// CHECK:          store [[M4]] to [init] [[STACK]] : $*M4
// CHECK:          [[M4_S2_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:          [[M4_S4_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:          [[SEE_ADDR_2:%[^,]+]] = function_ref @see_addr_2
// CHECK:          apply [[SEE_ADDR_2]]([[M4_S2_ADDR]], [[M4_S4_ADDR]])
// CHECK:          [[M4_S4_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s4
// CHECK:          destroy_addr [[M4_S4_ADDR_2]]
// CHECK:          [[M4_S2_ADDR_2:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s2
// CHECK:          destroy_addr [[M4_S2_ADDR_2]]
// CHECK:          [[M4_S1_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s1
// CHECK:          [[M4_S1:%[^,]+]] = load [take] [[M4_S1_ADDR]] : $*M
// CHECK:          [[M4_S3_ADDR:%[^,]+]] = struct_element_addr [[STACK]] : $*M4, #M4.s3
// CHECK:          [[M4_S3:%[^,]+]] = load [take] [[M4_S3_ADDR]] : $*M
// CHECK:          [[END_2:%[^,]+]] = function_ref @end_2
// CHECK:          apply [[END_2]]([[M4_S1]], [[M4_S3]])
// CHECK-LABEL: } // end sil function 'rdar110676577'
sil [ossa] @rdar110676577 : $@convention(thin) () -> () {
bb0:
  %0 = alloc_stack $M4
  %1 = mark_must_check [consumable_and_assignable] %0 : $*M4
  %3 = function_ref @get_M4 : $@convention(thin) () -> @owned M4
  %4 = apply %3() : $@convention(thin) () -> @owned M4
  store %4 to [init] %1 : $*M4
  %6 = struct_element_addr %1 : $*M4, #M4.s2
  %6a = struct_element_addr %1 : $*M4, #M4.s4
  %see_addr_2 = function_ref @see_addr_2 : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()
  apply %see_addr_2(%6, %6a) : $@convention(thin) (@in_guaranteed M, @in_guaranteed M) -> ()
  %12 = struct_element_addr %1 : $*M4, #M4.s1
  %13 = load [copy] %12 : $*M
  %14 = struct_element_addr %1 : $*M4, #M4.s3
  %15 = load [copy] %14 : $*M
  %16 = function_ref @end_2 : $@convention(thin) (@owned M, @owned M) -> ()
  %17 = apply %16(%13, %15) : $@convention(thin) (@owned M, @owned M) -> ()
  destroy_addr %1 : $*M4
  dealloc_stack %0 : $*M4
  %22 = tuple ()
  return %22 : $()
}

