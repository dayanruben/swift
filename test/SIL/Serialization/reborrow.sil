// First parse this and then emit a *.sib. Then read in the *.sib, then recreate

// RUN: %empty-directory(%t)
// RUN: %target-sil-opt %s -emit-sib -o %t/tmp.sib -module-name reborrow
// RUN: %target-sil-opt %t/tmp.sib -module-name reborrow | %FileCheck %s

sil_stage canonical

class Klass {}

// CHECK-LABEL: sil [serialized] [ossa] @reborrowTest : $@convention(thin) (@owned Klass) -> () {
// CHECK: bb3([[ARG:%.*]] : @reborrow @guaranteed $Klass):
// CHECK: } // end sil function 'reborrowTest'
sil [serialized] [ossa] @reborrowTest : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  cond_br undef, bb1, bb2

bb1:
  %b1 = begin_borrow %0 : $Klass
  br bb3(%b1 : $Klass)

bb2:
  %b2 = begin_borrow %0 : $Klass
  br bb3(%b2 : $Klass)

bb3(%r : @reborrow @guaranteed $Klass):
  end_borrow %r : $Klass
  destroy_value %0 : $Klass
  %9999 = tuple()
  return %9999 : $()
}
